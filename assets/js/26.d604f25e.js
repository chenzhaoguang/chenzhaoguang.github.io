(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{468:function(e,s,t){"use strict";t.r(s);var a=t(2),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[e._v("前言")]),e._v(" "),t("p",[e._v("此文为ssr三步曲的第三部，"),t("a",{attrs:{href:"https://www.keepjs.com/_posts/2020-06-18-%E4%BD%BF%E7%94%A8react-router+hooks%E6%90%AD%E5%BB%BA%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("前文在这"),t("OutboundLink")],1),e._v("\n这篇文章的代码有2个分支："),t("a",{attrs:{href:"https://github.com/Thyiad/react-ssr/tree/tag-v3-pre",target:"_blank",rel:"noopener noreferrer"}},[e._v("tag-v3-pre"),t("OutboundLink")],1),e._v("、"),t("a",{attrs:{href:"https://github.com/Thyiad/react-ssr/tree/tag-v3",target:"_blank",rel:"noopener noreferrer"}},[e._v("tag-v3"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"搭建步骤"}},[e._v("搭建步骤")]),e._v(" "),t("p",[e._v("之前写过一篇文章，koa+mongodb搭建后端，里面写的更详细一些，有兴趣的可以翻出来看看，只不过文末一部分一直搁置未完篇，因为一行行写起来比较繁琐，后面又比较忙。（说白了，是懒，哈哈）")]),e._v(" "),t("p",[e._v("此处我们简单一点，用koa+koa-router搞一个后端路由出来即可，话不多说，那就开始吧。。")]),e._v(" "),t("h3",{attrs:{id:"安装依赖"}},[e._v("安装依赖")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" i koa @koa/router koa-bodyparser koa-static art-template koa-art-template log4js chalk\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("node端的模板引擎推荐art和nunjucks，art简洁、速度快，而nunjucks属于富功能模板引擎，功能更加强大，有layout、block、全局函数/变量、模板继承等等。\n不过事情刚开始嘛，我们的需求是很简单的，杀鸡焉用牛刀，所以选择art")]),e._v(" "),t("p",[e._v("@koa/router，是koa团队接手了koa-router之后维护的类库，koa-router停留在了7.x，而@koa/router也是直接从8.x开始")]),e._v(" "),t("p",[e._v("log4js: 日志是少不了的，所以log4js来一个吧")]),e._v(" "),t("p",[e._v("chalk: 让控制台输出更漂亮")]),e._v(" "),t("p",[e._v("再安装一下types")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" i -D @types/koa @types/koa__router @types/koa-bodyparser @types/chalk\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("blockquote",[t("p",[e._v("接下来就不贴具体的代码了，只阐述一下思路，代码在github上有按分支存档，文中会对应说明")])]),e._v(" "),t("h3",{attrs:{id:"如何运行"}},[e._v("如何运行")]),e._v(" "),t("p",[e._v("如果是普通nodejs，我们可以用nodemon+ts-node来调试：")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" i ts-node\n// nodemon很多地方用的上，所以直接全局安装吧\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"devServer"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nodemon --watch src -e ts,tsx,js,json --exec node --inspect=127.0.0.1:9229 -r ts-node/register ./src/server/app.ts"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("最简单的一个例子就是koa路由里，使用renderToString，来渲染一个jsx，返回渲染后的string给前端。\n但如果直接运行的话，是会报错的，因为有以下几个问题需要解决：")]),e._v(" "),t("ol",[t("li",[e._v("nodejs不支持import/export语法\n"),t("blockquote",[t("p",[e._v("两个方案：")]),e._v(" "),t("ol",[t("li",[e._v("使用babel转，速度会拖慢")]),e._v(" "),t("li",[e._v("node9开始多了一个特性：--experimental-modules，node运行的时候启用这个选项，并且文件名需要为.mjs后缀")])])])]),e._v(" "),t("li",[e._v("nodejs不支持tsx语法")]),e._v(" "),t("li",[e._v("组件内部导入scss之类的文件在node端会报错")]),e._v(" "),t("li",[e._v("打包出来的js, css如何注入")]),e._v(" "),t("li",[e._v("服务端数据如何注入到客户端")])]),e._v(" "),t("p",[e._v("node是没办法对tsx, scss之类的做处理的，所以，webpack登场了，除了前端代码，后端代码同样需要用webpack来进行打包，主要有以下几点区别：")]),e._v(" "),t("p",[e._v("webpack：")]),e._v(" "),t("ol",[t("li",[e._v("webpack的target需要设置成node")]),e._v(" "),t("li",[e._v("css、scss使用ignore-loader忽略掉")]),e._v(" "),t("li",[e._v("使用loadable来拆分文件、做服务端渲染\n"),t("blockquote",[t("p",[e._v("loadable真是神器，没有这个的话，就只能用manifest loader来生成资源清单，并且没有拆分功能")])])]),e._v(" "),t("li",[e._v("服务端数据注入到客户端比较简单了，直接往window对象插入一个对象，比如ssrData = {}，然后前端初始化store的时候合并一下initState即可")])]),e._v(" "),t("h3",{attrs:{id:"初始版本"}},[e._v("初始版本")]),e._v(" "),t("p",[e._v("总的来说，我们需要跑3个命令：")]),e._v(" "),t("ol",[t("li",[e._v("编译客户端并watch")]),e._v(" "),t("li",[e._v("编译服务端并watch，服务端对client端生成的文件做静态资源处理")]),e._v(" "),t("li",[e._v("用nodemon之类的工具，watch服务端生成的文件，有变更时自动重启")])]),e._v(" "),t("p",[e._v("到这里，其实生产环境的ssr已经完成了，因为ssr我们就是对客户端、服务端分别进行打包，然后node运行服务端的代码启动服务。\n这个版本的代码详见：https://github.com/Thyiad/react-ssr/tree/tag-v3-pre")]),e._v(" "),t("h3",{attrs:{id:"进化版本"}},[e._v("进化版本")]),e._v(" "),t("p",[e._v("上一个版本在生产环境没问题，开发环境简直不能忍啊。因为css更新不会自动刷新、js更新不会自动刷新，干啥都需要手动刷新一下浏览器。。\n所以我们想办法改良一下，用一个脚本解决，这个命令干了这两个事情：")]),e._v(" "),t("ol",[t("li",[e._v("webpack编译客户端，并手动启一个webpackDevServer")]),e._v(" "),t("li",[e._v("webpack编译服务端，并监听hooks.done，在done之后启一个node，启动服务\n"),t("blockquote",[t("p",[e._v("启动新进程可以用child_process.spawn或者cluster，此处我们使用child_process即可。\ncluster是基于child_process.fork启动若干子进程，再有一个agent来调配，通过IPC通信，功能更强大，但貌似官方其实不是很推荐，我看到生产中更多人选择的是pm2等工具。\n就算css变更也同样会触发hooks.done，所以我们改进一下，nodemon只监听后端生成的js，有变更才杀掉旧的子进程，启动一个新的子进程")])])])]),e._v(" "),t("p",[e._v("这个版本同样进行了一些其他的优化，比如把配置文件提取到一个create-config.js中，客户端服务端都调用该函数生成config。同时命令简化成2条，dev和build分别用来启动本地调试和打包生产代码。\n这个版本的代码详见：https://github.com/Thyiad/react-ssr/tree/tag-v3")]),e._v(" "),t("h3",{attrs:{id:"还欠缺的"}},[e._v("还欠缺的")]),e._v(" "),t("ul",[t("li",[e._v("前文中所述的服务端数据注入到客户端、服务端获取数据\n"),t("blockquote",[t("p",[e._v("这两个其实都比较简单，所以只加了todo备注，没有填充代码")])])]),e._v(" "),t("li",[e._v("ui库加入\n"),t("blockquote",[t("p",[e._v("比如可以加入ant design，还有最近发现微软的fluentui也不错，感觉可以后面试用一下")])])]),e._v(" "),t("li",[e._v("封装成一个cli工具\n"),t("blockquote",[t("p",[e._v("在上述完善后，可以封装一个cli工具，支持生成spa、ssr、不同ui的项目代码")])])])]),e._v(" "),t("h2",{attrs:{id:"小结"}},[e._v("小结")]),e._v(" "),t("p",[e._v("整个过程其实也踩了不少坑，webpack的配置还是挺多的，不过只要你耐心根据需要把官网文档翻一遍，基本上也没啥问题。")]),e._v(" "),t("blockquote",[t("p",[e._v("上次看到有人开玩笑说现在多了一个工种：webpack配置工程师..")])]),e._v(" "),t("p",[e._v("vue生态的vite最近更新特别频繁，等稳定下来可以尝试一下，这些工具都是一代比一代简化，希望以后在配置方面能更简化、节省精力吧。。")])])}),[],!1,null,null,null);s.default=r.exports}}]);